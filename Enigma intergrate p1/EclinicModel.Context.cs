//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Enigma_intergrate_p1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EclinicEntities2 : DbContext
    {
        public EclinicEntities2()
            : base("name=EclinicEntities2")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminUser> AdminUsers { get; set; }
        public virtual DbSet<Available> Availables { get; set; }
        public virtual DbSet<ChannelingDetail> ChannelingDetails { get; set; }
        public virtual DbSet<Disease> Diseases { get; set; }
        public virtual DbSet<Doctor> Doctors { get; set; }
        public virtual DbSet<Hospital> Hospitals { get; set; }
        public virtual DbSet<NormalUser> NormalUsers { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<Pharmacy> Pharmacies { get; set; }
        public virtual DbSet<Symptom> Symptoms { get; set; }
        public virtual DbSet<SymptomMatchDisease> SymptomMatchDiseases { get; set; }
        public virtual DbSet<SymptomMatchUnique> SymptomMatchUniques { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TelNo> TelNoes { get; set; }
        public virtual DbSet<Unique> Uniques { get; set; }
    
        public virtual int Add_DeatailsOfDoctor(string nID, string fname, string lname, string address, string username, string password)
        {
            var nIDParameter = nID != null ?
                new ObjectParameter("NID", nID) :
                new ObjectParameter("NID", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_DeatailsOfDoctor", nIDParameter, fnameParameter, lnameParameter, addressParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int Add_DetailsOfPharmacy(string nID, string fname, string lname, string address, string username, string password)
        {
            var nIDParameter = nID != null ?
                new ObjectParameter("NID", nID) :
                new ObjectParameter("NID", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_DetailsOfPharmacy", nIDParameter, fnameParameter, lnameParameter, addressParameter, usernameParameter, passwordParameter);
        }
    
        public virtual int Add_Hospital(string hID, string name, string password)
        {
            var hIDParameter = hID != null ?
                new ObjectParameter("HID", hID) :
                new ObjectParameter("HID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Hospital", hIDParameter, nameParameter, passwordParameter);
        }
    
        public virtual int Add_PatientDetails(string nID, string bloodGroup, string gender, string age)
        {
            var nIDParameter = nID != null ?
                new ObjectParameter("NID", nID) :
                new ObjectParameter("NID", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("bloodGroup", bloodGroup) :
                new ObjectParameter("bloodGroup", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            var ageParameter = age != null ?
                new ObjectParameter("age", age) :
                new ObjectParameter("age", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_PatientDetails", nIDParameter, bloodGroupParameter, genderParameter, ageParameter);
        }
    
        public virtual int Add_Pharmacy(string pID, string name, string lat, string @long)
        {
            var pIDParameter = pID != null ?
                new ObjectParameter("PID", pID) :
                new ObjectParameter("PID", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var latParameter = lat != null ?
                new ObjectParameter("Lat", lat) :
                new ObjectParameter("Lat", typeof(string));
    
            var longParameter = @long != null ?
                new ObjectParameter("Long", @long) :
                new ObjectParameter("Long", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_Pharmacy", pIDParameter, nameParameter, latParameter, longParameter);
        }
    
        public virtual int Add_SpecialityDetails(string nID, string speciality, string gender)
        {
            var nIDParameter = nID != null ?
                new ObjectParameter("NID", nID) :
                new ObjectParameter("NID", typeof(string));
    
            var specialityParameter = speciality != null ?
                new ObjectParameter("speciality", speciality) :
                new ObjectParameter("speciality", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("gender", gender) :
                new ObjectParameter("gender", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_SpecialityDetails", nIDParameter, specialityParameter, genderParameter);
        }
    
        public virtual int Add_TelNo(string nID, string telNo)
        {
            var nIDParameter = nID != null ?
                new ObjectParameter("NID", nID) :
                new ObjectParameter("NID", typeof(string));
    
            var telNoParameter = telNo != null ?
                new ObjectParameter("TelNo", telNo) :
                new ObjectParameter("TelNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_TelNo", nIDParameter, telNoParameter);
        }
    
        public virtual int Add_UserDetailsOfPatient(string nID, string fname, string lname, string address, string username, string password)
        {
            var nIDParameter = nID != null ?
                new ObjectParameter("NID", nID) :
                new ObjectParameter("NID", typeof(string));
    
            var fnameParameter = fname != null ?
                new ObjectParameter("fname", fname) :
                new ObjectParameter("fname", typeof(string));
    
            var lnameParameter = lname != null ?
                new ObjectParameter("lname", lname) :
                new ObjectParameter("lname", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Add_UserDetailsOfPatient", nIDParameter, fnameParameter, lnameParameter, addressParameter, usernameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> anotherSym(string x1, string x2)
        {
            var x1Parameter = x1 != null ?
                new ObjectParameter("x1", x1) :
                new ObjectParameter("x1", typeof(string));
    
            var x2Parameter = x2 != null ?
                new ObjectParameter("x2", x2) :
                new ObjectParameter("x2", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("anotherSym", x1Parameter, x2Parameter);
        }
    
        public virtual ObjectResult<string> correctdis(string iddis)
        {
            var iddisParameter = iddis != null ?
                new ObjectParameter("iddis", iddis) :
                new ObjectParameter("iddis", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("correctdis", iddisParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> Count_Tuple()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("Count_Tuple");
        }
    
        public virtual ObjectResult<string> Diseasesp1(Nullable<int> id1, Nullable<int> id2, Nullable<int> id3, Nullable<int> id4)
        {
            var id1Parameter = id1.HasValue ?
                new ObjectParameter("id1", id1) :
                new ObjectParameter("id1", typeof(int));
    
            var id2Parameter = id2.HasValue ?
                new ObjectParameter("id2", id2) :
                new ObjectParameter("id2", typeof(int));
    
            var id3Parameter = id3.HasValue ?
                new ObjectParameter("id3", id3) :
                new ObjectParameter("id3", typeof(int));
    
            var id4Parameter = id4.HasValue ?
                new ObjectParameter("id4", id4) :
                new ObjectParameter("id4", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Diseasesp1", id1Parameter, id2Parameter, id3Parameter, id4Parameter);
        }
    
        public virtual ObjectResult<Get_ID_Result> Get_ID(string pid)
        {
            var pidParameter = pid != null ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ID_Result>("Get_ID", pidParameter);
        }
    
        public virtual ObjectResult<string> Get_Time(Nullable<System.DateTime> date, string doctor, string hospital)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("doctor", doctor) :
                new ObjectParameter("doctor", typeof(string));
    
            var hospitalParameter = hospital != null ?
                new ObjectParameter("hospital", hospital) :
                new ObjectParameter("hospital", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_Time", dateParameter, doctorParameter, hospitalParameter);
        }
    
        public virtual ObjectResult<string> Load_AdminPassword(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_AdminPassword", usernameParameter);
        }
    
        public virtual ObjectResult<string> Load_Doctor(string i)
        {
            var iParameter = i != null ?
                new ObjectParameter("i", i) :
                new ObjectParameter("i", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_Doctor", iParameter);
        }
    
        public virtual ObjectResult<string> Load_DoctorID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_DoctorID");
        }
    
        public virtual ObjectResult<string> Load_Hospital(string dID)
        {
            var dIDParameter = dID != null ?
                new ObjectParameter("DID", dID) :
                new ObjectParameter("DID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_Hospital", dIDParameter);
        }
    
        public virtual ObjectResult<string> Load_HospitalID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_HospitalID");
        }
    
        public virtual ObjectResult<string> Load_HospitalPassword(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_HospitalPassword", usernameParameter);
        }
    
        public virtual ObjectResult<string> Load_LogPatientID(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_LogPatientID", usernameParameter);
        }
    
        public virtual ObjectResult<string> Load_Password(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_Password", usernameParameter);
        }
    
        public virtual ObjectResult<string> Load_PatientID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_PatientID");
        }
    
        public virtual ObjectResult<string> Load_PharmacyID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Load_PharmacyID");
        }
    
        public virtual int Load_PharmacyPassword(string username)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Load_PharmacyPassword", usernameParameter);
        }
    
        public virtual int Make_Appointment(Nullable<System.DateTime> date, string doctor, string hospital, string time, string pid)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("doctor", doctor) :
                new ObjectParameter("doctor", typeof(string));
    
            var hospitalParameter = hospital != null ?
                new ObjectParameter("hospital", hospital) :
                new ObjectParameter("hospital", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(string));
    
            var pidParameter = pid != null ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Make_Appointment", dateParameter, doctorParameter, hospitalParameter, timeParameter, pidParameter);
        }
    
        public virtual int report(string count)
        {
            var countParameter = count != null ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("report", countParameter);
        }
    
        public virtual int report1(string did)
        {
            var didParameter = did != null ?
                new ObjectParameter("did", did) :
                new ObjectParameter("did", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("report1", didParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> Symptomsp1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Symptomsp1");
        }
    
        public virtual int Update_Table(Nullable<System.DateTime> date, string doctor, string hospital, string time)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            var doctorParameter = doctor != null ?
                new ObjectParameter("doctor", doctor) :
                new ObjectParameter("doctor", typeof(string));
    
            var hospitalParameter = hospital != null ?
                new ObjectParameter("hospital", hospital) :
                new ObjectParameter("hospital", typeof(string));
    
            var timeParameter = time != null ?
                new ObjectParameter("time", time) :
                new ObjectParameter("time", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_Table", dateParameter, doctorParameter, hospitalParameter, timeParameter);
        }
    }
}
